{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aldodominguezchavez/Documents/Programming/React/react-complete-course/next-js-meetup-project/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  const router = useRouter();\n  const {\n    image,\n    title,\n    address,\n    description\n  } = props.meetupData;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Here you can find the meetup details!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: image,\n      title: title,\n      address: address,\n      description: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://root:ThisIsTheCode1!@cluster0.ntlux.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupIds = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  console.log(meetupIds);\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupIds.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for the specific meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://root:ThisIsTheCode1!@cluster0.ntlux.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/aldodominguezchavez/Documents/Programming/React/react-complete-course/next-js-meetup-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Fragment","useRouter","Head","MeetupDetail","MeetupDetails","props","router","image","title","address","description","meetupData","getStaticPaths","client","connect","db","meetupsCollection","collection","meetupIds","find","_id","toArray","console","log","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n    const router = useRouter();\n\n    const { image, title, address, description } = props.meetupData;\n\n    return (\n        <Fragment>\n            <Head>\n                <title>{title}</title>\n                <meta \n                    name='description'\n                    content='Here you can find the meetup details!'\n                />\n            </Head>\n            <MeetupDetail \n                image={image}\n                title={title}\n                address={address}\n                description={description}\n            />\n        </Fragment>\n    );\n};\n\nexport async function getStaticPaths() {\n\n    const client = await MongoClient.connect('mongodb+srv://root:ThisIsTheCode1!@cluster0.ntlux.mongodb.net/meetups?retryWrites=true&w=majority');\n\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    \n    const meetupIds = await meetupsCollection.find({}, { _id: 1 }).toArray();\n    console.log(meetupIds);\n    \n    client.close();\n\n\n    return {\n        fallback: false,\n        paths: meetupIds.map(meetup => ({\n            params: {\n                meetupId: meetup._id.toString(),\n            }\n        }))\n    }\n}\n\nexport async function getStaticProps(context) {\n    //fetch data for the specific meetup\n\n    const meetupId = context.params.meetupId;\n    \n    const client = await MongoClient.connect('mongodb+srv://root:ThisIsTheCode1!@cluster0.ntlux.mongodb.net/meetups?retryWrites=true&w=majority');\n\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    \n    const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n    console.log(selectedMeetup);\n    \n    client.close();\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n            }\n        }\n    }\n\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}